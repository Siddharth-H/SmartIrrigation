/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package majorproject;

import Connection.conn;
import java.awt.BorderLayout;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.table.DefaultTableModel;
import jssc.SerialPort;
import jssc.SerialPortEvent;
import jssc.SerialPortEventListener;
import jssc.SerialPortException;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.jdbc.JDBCXYDataset;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;

/**
 *
 * @author User
 */
public class Index extends javax.swing.JFrame {

    //serial Port instance
    public static SerialPort serialPort;

    static void main() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    public DefaultTableModel dtm;
    public static String receivedMessage;
    String plantWaterReq;
    String plantMinMoisture;
    String plantMaxMoisture;

    /**
     * Creates new form main
     */
    public Index() {
        initComponents();
        dtm = (DefaultTableModel) jTable2.getModel();
        emptyTable(dtm);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jPanel4 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel7 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jProgressBar1 = new javax.swing.JProgressBar();
        jLabel5 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox<>();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu5 = new javax.swing.JMenu();
        jMenu4 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        jMenu6 = new javax.swing.JMenu();
        jMenu10 = new javax.swing.JMenu();
        jMenu7 = new javax.swing.JMenu();
        jMenu8 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        jMenu9 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(javax.swing.UIManager.getDefaults().getColor("InternalFrame.activeTitleGradient"));
        setBounds(new java.awt.Rectangle(0, 0, 0, 0));
        setPreferredSize(new java.awt.Dimension(1920, 1078));
        setResizable(false);
        setSize(new java.awt.Dimension(2100, 3000));

        jTabbedPane1.setBackground(new java.awt.Color(153, 255, 255));
        jTabbedPane1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTabbedPane1.setToolTipText("");
        jTabbedPane1.setFont(new java.awt.Font("Microsoft Sans Serif", 1, 24)); // NOI18N

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel3.setText("Logs");

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane3.setViewportView(jTextArea1);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(73, 73, 73)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 907, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(64, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addComponent(jLabel3)
                .addGap(39, 39, 39)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 541, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(113, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Logs   .", jPanel3);

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel4.setText("Water Usage");

        jPanel6.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 948, Short.MAX_VALUE)
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 586, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(63, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(69, 69, 69)
                .addComponent(jLabel4)
                .addGap(41, 41, 41)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(38, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Water Usage   .", jPanel4);

        jLabel1.setBackground(new java.awt.Color(153, 255, 255));
        jLabel1.setFont(new java.awt.Font("Microsoft Sans Serif", 1, 24)); // NOI18N
        jLabel1.setText("Sensor 2");

        jLabel2.setFont(new java.awt.Font("Microsoft Sans Serif", 1, 24)); // NOI18N
        jLabel2.setText("Sensor 1");

        jTable2.setFont(new java.awt.Font("Segoe UI", 0, 20)); // NOI18N
        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "TIME", "MOISTURE LEVEL (%)", "VALVE STATUS"
            }
        ));
        jTable2.setIntercellSpacing(new java.awt.Dimension(5, 5));
        jTable2.setRowHeight(25
        );
        jScrollPane2.setViewportView(jTable2);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(51, 51, 51)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 914, Short.MAX_VALUE)
                    .addComponent(jScrollPane1))
                .addContainerGap(79, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addComponent(jLabel2)
                .addGap(30, 30, 30)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 84, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(40, 40, 40)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(141, 141, 141))
        );

        jTabbedPane1.addTab("Sensor Data   .", jPanel2);

        jPanel7.setBackground(new java.awt.Color(0, 0, 102));

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("User Name");
        jLabel6.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Welcome");
        jLabel8.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(78, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                .addContainerGap(26, Short.MAX_VALUE)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jComboBox1.setFont(new java.awt.Font("Segoe UI Semibold", 0, 24)); // NOI18N
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Farm 1", "Fram 2" }));

        jButton1.setFont(new java.awt.Font("Segoe UI Symbol", 1, 24)); // NOI18N
        jButton1.setText("Show Details");

        jPanel5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 641, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 371, Short.MAX_VALUE)
        );

        jLabel5.setFont(new java.awt.Font("Segoe UI Semibold", 1, 24)); // NOI18N
        jLabel5.setText("Average Moisture");

        jComboBox2.setFont(new java.awt.Font("Segoe UI Semibold", 1, 24)); // NOI18N
        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Sensor 1", "Sensor 2" }));

        jMenuBar1.setBackground(new java.awt.Color(255, 102, 0));
        jMenuBar1.setBorder(null);
        jMenuBar1.setAlignmentY(15.0F);
        jMenuBar1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jMenuBar1.setMinimumSize(new java.awt.Dimension(56, 30));
        jMenuBar1.setPreferredSize(new java.awt.Dimension(252, 30));

        jMenu1.setBorder(null);
        jMenu1.setText("User");
        jMenu1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jMenu1.setFocusPainted(true);
        jMenu1.setFocusTraversalPolicyProvider(true);
        jMenu1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jMenu1.setHideActionText(true);
        jMenu1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jMenu1.setMinimumSize(new java.awt.Dimension(27, 25));

        jMenu5.setText("Update User Details");
        jMenu5.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jMenu1.add(jMenu5);

        jMenu4.setText("Check User Information");
        jMenu4.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jMenu1.add(jMenu4);

        jMenuBar1.add(jMenu1);

        jMenu2.setBackground(java.awt.SystemColor.activeCaption);
        jMenu2.setText("Report");
        jMenu2.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N

        jMenu6.setText("View Farm Details");
        jMenu6.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jMenu2.add(jMenu6);

        jMenu10.setText("View Plant Detail");
        jMenu10.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jMenu2.add(jMenu10);

        jMenuBar1.add(jMenu2);

        jMenu7.setText("Contact Us");
        jMenu7.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N

        jMenu8.setText("Contact Us");
        jMenu8.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jMenu7.add(jMenu8);

        jMenuBar1.add(jMenu7);

        jMenu3.setText("About Us");
        jMenu3.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jMenu3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu3MouseClicked(evt);
            }
        });

        jMenu9.setText("About Us");
        jMenu9.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jMenu3.add(jMenu9);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(51, 51, 51)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1051, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 137, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 390, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(38, 38, 38))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(86, 86, 86))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(79, 79, 79)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(54, 54, 54)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(28, 28, 28)
                                .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(65, 65, 65)
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(30, 30, 30))
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 812, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(157, 157, 157))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenu3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu3MouseClicked
        // TODO add your handling code here:

    }//GEN-LAST:event_jMenu3MouseClicked

    //Connecting to Database
    Connection connectToDatabase() {
        System.out.println("Establishing Connection::");
        Connection con;
        try {
            con = conn.getCon();
        } catch (Exception e) {
            System.out.println("Connection can't be established");
            System.out.println("Error" + e);
            return null;
        }
        return con;

    }

    //Disconnect with Database
    private void closeConnection(Connection con) {
        try {
            con.close();
        } catch (SQLException e) {

        }
    }

    //Insert moisture valve in moisture table 
    void insertIntoMoisture(Connection con, String s) {
        try {
            System.out.println("Performing moisture database insertion:: value:: " + s);
            String query = "insert into moisture(m_value) values(" + s + ")";
            Statement st = con.createStatement();

            System.out.println("Statement created");
            int x = st.executeUpdate(query);

            System.out.println("Execute Updated");
            if (x > 0) {
                System.out.println("Data saved");
            } else {
                System.out.println("Data cant be saved.");
            }

        } catch (SQLException e) {
            System.out.println("Problem in Inserting moisture value in database:: " + e);

        }
        closeConnection(con);
    }

    void updateInValve(Connection con, String s) {
        try {
            System.out.println("Performing valve database insertion:: value=> " + s);
            String query = "UPDATE valve SET v_status='" + s + "' WHERE v_id = 1";
            Statement st = con.createStatement();

            System.out.println("Statement created");
            int x = st.executeUpdate(query);

            System.out.println("Execute Updated");
            if (x > 0) {
                System.out.println("Data saved. Valve");
            } else {
                System.out.println("Data cant be saved.Valve");
            }

        } catch (SQLException e) {
            System.out.println("Problem in Inserting valve value in database:: " + e);

        }
        closeConnection(con);
    }

    //Tell Arduino the minimum Moisture Level, maximum moisture level and daily water requirement
    boolean setMinMoisture() {
        Connection con = connectToDatabase();
        System.out.println("Setting Moisture values and water req.");
        String s = "select p.water_req, min_moisture, max_moisture from plant p where p.plantid IN(select f.plantid from farm f where f.userid = 100 )";
        try {
            PreparedStatement ps = con.prepareStatement(s);
            ResultSet rs = ps.executeQuery();

            while (rs.next()) {
                plantWaterReq = rs.getString(1);
                plantMinMoisture = rs.getString(2);
                plantMaxMoisture = rs.getString(3);

                /*    serialPort.writeString(waterReq);
                serialPort.writeString(minMoisture);
                serialPort.writeString(maxMoisture);
                
                System.out.println("water Req = "+waterReq);
                System.out.println("minMois = "+minMoisture);
                System.out.println("maxMois = "+maxMoisture);
                 */
            }
        } catch (SQLException e) {
            System.out.println("Minimum Moisture cant be set:: " + e);
            return false;
        }
        System.out.println("Done Setting Min Moisture");
        return true;

    }

    //set serial port
    boolean setSerialPort() {

        String portName = "COM3";

        // writing to port
        serialPort = new SerialPort(portName);
        try {
            // opening port
            serialPort.openPort();

            serialPort.setParams(SerialPort.BAUDRATE_9600,
                    SerialPort.DATABITS_8,
                    SerialPort.STOPBITS_1,
                    SerialPort.PARITY_NONE, false, false);

            serialPort.setFlowControlMode(SerialPort.FLOWCONTROL_NONE);

            serialPort.addEventListener(new Index.PortReader(), SerialPort.MASK_RXCHAR);
        } catch (SerialPortException e) {
            System.out.println("Problem in connecting to the serial port:: " + e);
            return false;
        }
        return true;
    }

    private void series(String table_time, String table_moisture_percentage) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    private static class PortReader implements SerialPortEventListener {

        @Override
        public void serialEvent(SerialPortEvent event) {
            System.out.println("inside Serial Event");
            if (event.isRXCHAR() && event.getEventValue() > 0) {
                return;
            }
        }
    }

    //send message to Arduino
    private void sendMessage(String s) {
        try {
            System.out.println("Inside Send mEssage:: msg=" + s);
            System.out.println("Serial Port :: " + serialPort + " Name: " + serialPort.getPortName());

            serialPort.writeString(s);
        } catch (SerialPortException e) {
            System.out.println("Error in sending Message::" + e);
        }
    }

    //receive message from Arduino
    private String receiveMessage() {
        try {
            String receivedMessage = null;
            while (receivedMessage == null) {
                receivedMessage = serialPort.readString();
            }
            return receivedMessage;
        } catch (SerialPortException e) {
            System.out.println("Error in receiving Message::" + e);
            return null;
        }
    }

    //Read data for Eternity ;P
    void startInfiniteLoop() {
        try {

            Thread t = new Thread() {
                @Override
                public void run() {
                    try {

                        while (true) {

                            int moistureLevel = readMoisture();
                            String valve = null;

                            if (Integer.parseInt(plantWaterReq) > 0) {
                                if (moistureLevel < Integer.parseInt(plantMinMoisture)) {
                                    changeValveState("ON");
                                    valve = "ON";
                                }

                                if (moistureLevel >= Integer.parseInt(plantMaxMoisture)) {
                                    changeValveState("OFF");
                                    valve = "OFF";
                                }
                            }

                            changeValveState("OFF");
                            insertIntoMoisture(connectToDatabase(), "" + moistureLevel + "");
                            updateInValve(connectToDatabase(), valve);
                            emptyTable(dtm);
                            showSensorTable();
                            setProgressBar();
                            createChart();
                            Thread.sleep(10000);

                        }
                    } catch (Exception e) {
                        System.out.println("Error in run Thread :: " + e);
                    }
                }
            };
            t.start();
        } catch (Exception e) {
            System.out.println("Problem in Start infinite loop:: " + e);
        }

    }

    //Insert into Sensor table
    private void showSensorTable() {
        try {
            String s_select = "select time,m_value from moisture order by moisture.time DESC LIMIT 6";
            Connection con = connectToDatabase();
            PreparedStatement ps = con.prepareStatement(s_select);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {

                String table_time = rs.getString(1);
                String table_moisture_percentage = rs.getString(2);
                String table_valve;
                if (Integer.parseInt(table_moisture_percentage) > Integer.parseInt(plantMaxMoisture)) {
                    table_valve = "OFF";
                } else {
                    table_valve = "ON";
                }

                Object obj[] = {table_time, table_moisture_percentage, table_valve};
                dtm.addRow(obj);
            }
            jTable2.setModel(dtm);
            System.out.println("Table Done");
            closeConnection(con);
        } catch (Exception e) {
            System.out.println("Shpw table error ::" + e);

        }

    }

    //empty Table
    private void emptyTable(DefaultTableModel dtmTemp) {
        int rowCount = dtmTemp.getRowCount();
        //Remove rows one by one from the end of the table
        for (int i = rowCount - 1; i >= 0; i--) {
            dtmTemp.removeRow(i);
        }
    }

    //setProgress Bar to avg mositure sensor rating
    private void setProgressBar() {
        try {
            Connection con = connectToDatabase();
            String s_progressBar = "select avg(m_value) from moisture";
            Statement st_pb = con.createStatement();
            ResultSet rs_pbSet = st_pb.executeQuery(s_progressBar);
            while (rs_pbSet.next()) {
                float pg_value = rs_pbSet.getFloat(1);
                System.out.println("PG value = " + pg_value);

//                            if(pg_value<10){
//                                pg_value = 49; 
//                            }
                jProgressBar1.setStringPainted(true);
                jProgressBar1.setValue((int) pg_value);

                System.out.println("Progress bar done");
                connectToDatabase();
            }
        } catch (Exception e) {
            System.out.println("Problem in Progress Bar:: " + e);

        }

    }

    //readMoistureData
    int readMoisture() {
        System.out.println("Reading Moisture");
        sendMessage("readM");
        String moisture = null;
        while (moisture == null) {
            moisture = receiveMessage();
        }
        int moistureLevel = Integer.parseInt(moisture);
        return moistureLevel;

    }

    //change valve state
    void changeValveState(String state) {
        sendMessage("cvs");
        String moisture = null;
        while (moisture != null) {
            moisture = receiveMessage();
        }
        sendMessage(state);
    }

    //create Chart in jPanel5
    void createChart() {
        try {
            jPanel5.setLayout(new java.awt.BorderLayout());
            
//            XYSeries series = new XYSeries("XYGraph");
//            String query = "SELECT time(time) FROM moisture order BY time DESC LIMIT 10";
//            Connection con = connectToDatabase();
//            PreparedStatement ps = con.prepareStatement(query);
//            ResultSet rs = ps.executeQuery();
//            while (rs.next()) {
//
//                String table_time = rs.getString(1);
//                String table_moisture_percentage = rs.getString(2);
//                series(table_time,table_moisture_percentage);
//            }

            String query = "SELECT time(time),m_value FROM moisture order BY time DESC LIMIT 10";
            Connection con = connectToDatabase();
            
            

// Add the series to your data set
            JDBCXYDataset jds = new JDBCXYDataset(con);
            jds.executeQuery(query);
            JFreeChart chart = ChartFactory.createTimeSeriesChart("Moisture Level","Time", "Moisture", jds, true, true,false);
         
// Generate the graph
//            JFreeChart chart = ChartFactory.createXYLineChart(
//                    "XY Chart", // Title
//                    "x-axis", // x-axis Label
//                    "y-axis", // y-axis Label
//                    dataset, // Dataset
//                    PlotOrientation.VERTICAL, // Plot Orientation
//                    true, // Show Legend
//                    true, // Use tooltips
//                    false // Configure chart to generate URLs?
//            );
            ChartPanel CP = new ChartPanel(chart);
            
            jPanel5.add(CP, BorderLayout.CENTER);
            jPanel5.validate();

        } catch (Exception e) {
            System.out.println("Problem in creating Graph:: " + e);
        }
    }

    /**
     */
    //    public static void main(String args[]) {
    //        int i=3;
    //        /* Set the Nimbus look and feel */
    //        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
    //        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
    //         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
    //         */
    //        try {
    //            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
    //                if ("Windows".equals(info.getName())) {
    ////                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
    //                    UIManager.setLookAndFeel("com.jtattoo.plaf.mint.MintLookAndFeel");
    ////                    break;
    //                }
    //            }
    //        } catch (ClassNotFoundException ex) {
    //            java.util.logging.Logger.getLogger(Index.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    //        } catch (InstantiationException ex) {
    //            java.util.logging.Logger.getLogger(Index.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    //        } catch (IllegalAccessException ex) {
    //            java.util.logging.Logger.getLogger(Index.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    //        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
    //            java.util.logging.Logger.getLogger(Index.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    //        }
    //        //</editor-fold>
    //        //</editor-fold>
    //
    //        /* Create and display the form */
    //        java.awt.EventQueue.invokeLater(new Runnable() {
    //            public void run() {
    //                new Index().setVisible(true);
    //            }
    //        });
    //    }
    //My Main method
    public static void mainIndex() {
        int i = 3;
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    UIManager.setLookAndFeel("com.jtattoo.plaf.smart.SmartLookAndFeel");
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Index.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Index.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Index.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Index.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Index().setVisible(true);
            }
        });
//        Index index = new Index();
//        index.setSerialPort();
//        index.setMinMoisture();
//        try {
//            Thread t = new Thread() {
//                @Override
//                public void run() {
//                    try {
//
//                        while (true) {
//                            int moistureLevel = index.readMoisture();
//                            String valve = null;
//                            if (Integer.parseInt(index.plantWaterReq) > 0) {
//                                if (moistureLevel < Integer.parseInt(index.plantMinMoisture)) {
//                                    index.changeValveState("ON");
//                                    valve = "ON";
//                                }
//
//                                if (moistureLevel >= Integer.parseInt(index.plantMaxMoisture)) {
//                                    index.changeValveState("OFF");
//                                    valve = "OFF";
//                                }
//                            }
//                            index.changeValveState("OFF");
//                            index.insertIntoMoisture(index.connectToDatabase(), "" + moistureLevel + "");
//                            index.updateInValve(index.connectToDatabase(), valve);
//                            Thread.sleep(3000);
//                        }
//                    } catch (InterruptedException | NumberFormatException e) {
//                        System.out.println("Problem in Start infinite loop Thread::" + e);
//                    }
//                }
//            };
//            t.start();
//        } catch (Exception e) {
//            System.out.println("Problem in Start infinite loop:: " + e);
//        }

//        Index index = new Index();
//        if (index.setSerialPort() && index.setMinMoisture()) {
//            index.startInfiniteLoop();
////            try {
////                Thread t = new Thread() {
////                    public void run() {
////
////                    }
////                };
////
////            } catch (Exception e) {
////                System.out.println("Index Main ::" + e);
////            }
//        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu10;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenu jMenu6;
    private javax.swing.JMenu jMenu7;
    private javax.swing.JMenu jMenu8;
    private javax.swing.JMenu jMenu9;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private static javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private static javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    private static javax.swing.JTable jTable2;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
}
