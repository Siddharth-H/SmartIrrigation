/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package majorproject;

import Connection.conn;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.TimeZone;
import javax.swing.JTextPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.AttributeSet;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyleContext;
import jssc.SerialPort;
import jssc.SerialPortEvent;
import jssc.SerialPortEventListener;
import jssc.SerialPortException;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.XYPlot;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.jdbc.JDBCXYDataset;

/**
 *
 * @author User
 */
public class Index extends javax.swing.JFrame {

    //serial Port instance
    public static SerialPort serialPort;

    static void main() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    public DefaultTableModel dtm;
    public static String receivedMessage;
    String plantWaterReq;
    String plantMinMoisture;
    String plantMaxMoisture;
    int presentMoistureLevel;
    int previousMoistureLevel = 0;
    int sessionUserId;
    boolean isValveON = false;

    /**
     * Creates new form main
     */
    public Index() {
        initComponents();
        dtm = (DefaultTableModel) jTable2.getModel();
        emptyTable(dtm);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jTabbedPane4 = new javax.swing.JTabbedPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        jPanel4 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel7 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jProgressBar1 = new javax.swing.JProgressBar();
        jLabel5 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox<>();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu4 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        jMenu6 = new javax.swing.JMenu();
        jMenu10 = new javax.swing.JMenu();
        jMenu7 = new javax.swing.JMenu();
        jMenu8 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        jMenu9 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(javax.swing.UIManager.getDefaults().getColor("InternalFrame.activeTitleGradient"));
        setBounds(new java.awt.Rectangle(0, 0, 0, 0));
        setPreferredSize(new java.awt.Dimension(1920, 1024));
        setResizable(false);
        setSize(new java.awt.Dimension(2100, 3000));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jTabbedPane1.setBackground(new java.awt.Color(153, 255, 255));
        jTabbedPane1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTabbedPane1.setToolTipText("");
        jTabbedPane1.setFont(new java.awt.Font("Microsoft Sans Serif", 1, 24)); // NOI18N
        jTabbedPane1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTabbedPane1MouseClicked(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel3.setText("Logs");

        jTabbedPane2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jTabbedPane2.addTab("Data", jTabbedPane4);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane3.setViewportView(jTextArea1);

        jTabbedPane2.addTab("Event", jScrollPane3);

        jTextPane1.setEditable(false);
        jTextPane1.setBackground(new java.awt.Color(204, 204, 204));
        jScrollPane5.setViewportView(jTextPane1);

        jTabbedPane2.addTab("Event", jScrollPane5);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(73, 73, 73)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTabbedPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 806, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addContainerGap(165, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addComponent(jTabbedPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 573, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(113, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Logs   .", jPanel3);

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel4.setText("Water Usage");

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 876, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 572, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(jLabel4))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(72, 72, 72)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(96, 96, 96))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(69, 69, 69)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(76, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Water Usage   .", jPanel4);

        jLabel1.setBackground(new java.awt.Color(153, 255, 255));
        jLabel1.setFont(new java.awt.Font("Microsoft Sans Serif", 1, 24)); // NOI18N
        jLabel1.setText("Sensor 2");

        jLabel2.setFont(new java.awt.Font("Microsoft Sans Serif", 1, 24)); // NOI18N
        jLabel2.setText("Sensor 1");

        jTable2.setFont(new java.awt.Font("Segoe UI", 0, 20)); // NOI18N
        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "TIME", "MOISTURE LEVEL (%)", "VALVE STATUS"
            }
        ));
        jTable2.setIntercellSpacing(new java.awt.Dimension(5, 5));
        jTable2.setRowHeight(25
        );
        jScrollPane2.setViewportView(jTable2);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "TIME", "MOISTURE LEVEL", "VALVE STATUS"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(51, 51, 51)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 914, Short.MAX_VALUE)
                    .addComponent(jScrollPane1))
                .addContainerGap(79, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addComponent(jLabel2)
                .addGap(30, 30, 30)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 84, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(40, 40, 40)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(141, 141, 141))
        );

        jTabbedPane1.addTab("Sensor Data   .", jPanel2);

        jPanel7.setBackground(new java.awt.Color(0, 0, 102));

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("User Name");
        jLabel6.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Welcome");
        jLabel8.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                .addContainerGap(32, Short.MAX_VALUE)
                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(22, Short.MAX_VALUE))
        );

        jButton1.setFont(new java.awt.Font("Segoe UI Symbol", 1, 24)); // NOI18N
        jButton1.setText("Show Details");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jPanel5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 692, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 443, Short.MAX_VALUE)
        );

        jLabel5.setFont(new java.awt.Font("Segoe UI Semibold", 1, 24)); // NOI18N
        jLabel5.setText("Average Moisture");

        jComboBox2.setFont(new java.awt.Font("Segoe UI Semibold", 1, 24)); // NOI18N
        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Sensor 1", "Sensor 2" }));
        jComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox2ActionPerformed(evt);
            }
        });

        jMenuBar1.setBackground(new java.awt.Color(255, 102, 0));
        jMenuBar1.setBorder(null);
        jMenuBar1.setAlignmentY(15.0F);
        jMenuBar1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jMenuBar1.setMinimumSize(new java.awt.Dimension(56, 30));
        jMenuBar1.setPreferredSize(new java.awt.Dimension(252, 30));

        jMenu1.setBorder(null);
        jMenu1.setText("User");
        jMenu1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jMenu1.setFocusPainted(true);
        jMenu1.setFocusTraversalPolicyProvider(true);
        jMenu1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jMenu1.setHideActionText(true);
        jMenu1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jMenu1.setMinimumSize(new java.awt.Dimension(27, 25));
        jMenu1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu1MouseClicked(evt);
            }
        });

        jMenu4.setText("User Details");
        jMenu4.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jMenu1.add(jMenu4);

        jMenuBar1.add(jMenu1);

        jMenu2.setBackground(java.awt.SystemColor.activeCaption);
        jMenu2.setText("Report");
        jMenu2.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N

        jMenu6.setText("View Farm Details");
        jMenu6.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jMenu2.add(jMenu6);

        jMenu10.setText("View Plant Detail");
        jMenu10.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jMenu2.add(jMenu10);

        jMenuBar1.add(jMenu2);

        jMenu7.setText("Contact Us");
        jMenu7.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jMenu7.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu7MouseClicked(evt);
            }
        });

        jMenu8.setText("Contact Us");
        jMenu8.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jMenu8.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu8MouseClicked(evt);
            }
        });
        jMenu7.add(jMenu8);

        jMenuBar1.add(jMenu7);

        jMenu3.setText("About Us");
        jMenu3.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jMenu3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu3MouseClicked(evt);
            }
        });

        jMenu9.setText("About Us");
        jMenu9.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jMenu9.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu9MouseClicked(evt);
            }
        });
        jMenu3.add(jMenu9);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(51, 51, 51)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1051, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 63, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 390, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(69, 69, 69))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(17, 17, 17)))
                .addContainerGap(44, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(124, 124, 124)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(62, 62, 62)
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jProgressBar1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(187, 187, 187))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 812, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    private void jMenu3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu3MouseClicked
        // TODO add your handling code here:

    }//GEN-LAST:event_jMenu3MouseClicked

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated

        jLabel6.setText(Common.USER_NAME);
    }//GEN-LAST:event_formWindowActivated

    private void jComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox2ActionPerformed

    private void jMenu9MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu9MouseClicked
        // TODO add your handling code here:
        About_us.aboutusMain();
    }//GEN-LAST:event_jMenu9MouseClicked

    private void jMenu8MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu8MouseClicked
        // TODO add your handling code here:
        contact_us.contactPage();
    }//GEN-LAST:event_jMenu8MouseClicked

    private void jTabbedPane1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTabbedPane1MouseClicked
        // TODO add your handling code here:

//        createBarGraph();
    }//GEN-LAST:event_jTabbedPane1MouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        createBarGraph();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jMenu1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu1MouseClicked
        // TODO add your handling code here:
        User_Info.main();
    }//GEN-LAST:event_jMenu1MouseClicked

    private void jMenu7MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu7MouseClicked
        // TODO add your handling code here:
        contact_us.contactPage();
    }//GEN-LAST:event_jMenu7MouseClicked

    //For Text Pane used in Logs : Event
    public static void appendToPane(JTextPane tp, String msg, Color c)
    {
        StyleContext sc = StyleContext.getDefaultStyleContext();
        AttributeSet aset = sc.addAttribute(SimpleAttributeSet.EMPTY, StyleConstants.Foreground, c);

        aset = sc.addAttribute(aset, StyleConstants.FontFamily, "Lucida Console");
        aset = sc.addAttribute(aset, StyleConstants.Alignment, StyleConstants.ALIGN_JUSTIFIED);

        int len = tp.getDocument().getLength();
        tp.setCaretPosition(len);
        tp.setCharacterAttributes(aset, false);
        tp.replaceSelection(msg);
    }
    
    //Connecting to Database
    Connection connectToDatabase() {
//        System.out.println("Establishing Connection::");
        appendToPane(jTextPane1, "Connecting to Database.. \n", Color.black);
        Connection con;
        try {
            con = conn.getCon();
        } catch (Exception e) {
            System.out.println("Connection can't be established");
            System.out.println("Error" + e);
            appendToPane(jTextPane1, "Error occured while connecting to Database : "+e+"\n", Color.red);
            return null;
        }
        appendToPane(jTextPane1, "Connection Esatablished.\n", Color.green);
        return con;

    }

    //Disconnect with Database
    private void closeConnection(Connection con) {
        appendToPane(jTextPane1, "Closing Database Connection .\n", Color.black);
        
        try {
            con.close();
            
        } catch (SQLException e) {
            appendToPane(jTextPane1, "Problem in Closing Connectiion.\n", Color.red);
        
        }
        appendToPane(jTextPane1, "Connection Closed Succesfully.\n", Color.green);
        
    }

    //Insert moisture valve in moisture table 
    void insertIntoMoisture(Connection con, String s) {
        try {
            System.out.println("Performing moisture database insertion:: value:: " + s);
            appendToPane(jTextPane1, "Performing moisture database insertion.\n", Color.black);
        
            String query = "insert into moisture(m_value) values(" + s + ")";
            
            Statement st = con.createStatement();

//            System.out.println("Statement created");
            int x = st.executeUpdate(query);

//            System.out.println("Execute Updated");
            if (x > 0) {
//                System.out.println("Data saved");
            } else {
//                System.out.println("Data cant be saved.");
            }

        } catch (SQLException e) {
            System.out.println("Problem in Inserting moisture value in database:: " + e);
            appendToPane(jTextPane1, "Problem in Inserting moisture value in database", Color.red);
        }
        appendToPane(jTextPane1, "Insertion done successfully.", Color.green);
        closeConnection(con);
    }

    void updateInValve(Connection con, String s) {
        try {
            System.out.println("Performing valve database insertion:: value=> " + s);
            appendToPane(jTextPane1, "Performing moisture database Updation.\n", Color.black);
            String query = "UPDATE valve SET v_status='" + s + "' WHERE v_id = 1";
            Statement st = con.createStatement();

//            System.out.println("Statement created");
            int x = st.executeUpdate(query);

//            System.out.println("Execute Updated");
            if (x > 0) {
//                System.out.println("Data saved. Valve");
            } else {
//                System.out.println("Data cant be saved.Valve");
            }

        } catch (SQLException e) {
            System.out.println(":: " + e);
            appendToPane(jTextPane1, "Problem in updating data in the database.\n", Color.red);

        }
        appendToPane(jTextPane1, "Updation Done successfully", Color.GREEN);
        closeConnection(con);
    }

    //Tell Arduino the minimum Moisture Level, maximum moisture level and daily water requirement
    boolean setMinMoisture() {
        Connection con = connectToDatabase();
        System.out.println("Setting Moisture values and water req.");
        String s = "select p.water_req, p.min_moisture, p.max_moisture from plant p where p.plantid IN(select f.plantid from farm f where f.userid = 100 )";
        try {
            PreparedStatement ps = con.prepareStatement(s);
            ResultSet rs = ps.executeQuery();

            while (rs.next()) {
                plantWaterReq = rs.getString(1);
                plantMinMoisture = rs.getString(2);
                plantMaxMoisture = rs.getString(3);

                /*    serialPort.writeString(waterReq);
                serialPort.writeString(minMoisture);
                serialPort.writeString(maxMoisture);
                
                System.out.println("water Req = "+waterReq);
                System.out.println("minMois = "+minMoisture);
                System.out.println("maxMois = "+maxMoisture);
                 */
            }
        } catch (SQLException e) {
            System.out.println("Minimum Moisture cant be set:: " + e);
            return false;
        }
//        System.out.println("Done Setting Min Moisture");
        return true;

    }

    //set serial port
    boolean setSerialPort() {
        appendToPane(jTextPane1,"Establishing Serial Communication...\n", Color.black);
        String portName = "COM3";

        // writing to port
        serialPort = new SerialPort(portName);
        try {
            // opening port
            serialPort.openPort();

            serialPort.setParams(SerialPort.BAUDRATE_9600,
                    SerialPort.DATABITS_8,
                    SerialPort.STOPBITS_1,
                    SerialPort.PARITY_NONE, false, false);

            serialPort.setFlowControlMode(SerialPort.FLOWCONTROL_NONE);

            serialPort.addEventListener(new Index.PortReader(), SerialPort.MASK_RXCHAR);
        } catch (SerialPortException e) {
            System.out.println("Problem in connecting to the serial port:: " + e);
            appendToPane(jTextPane1, "Problem in connecting to the serial port\n", Color.red);
            return false;
        }
        System.out.println("Serial Port Done");
        appendToPane(jTextPane1, "Serial Communicatoin established\n", Color.green);
        return true;
    }

    private void series(String table_time, String table_moisture_percentage) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    private static class PortReader implements SerialPortEventListener {

        @Override
        public void serialEvent(SerialPortEvent event) {
//            System.out.println("inside Serial Event");
            if (event.isRXCHAR() && event.getEventValue() > 0) {
                return;
            }
        }
    }

    //send message to Arduino
    private void sendMessage(String s) {
        try {
            System.out.println("Inside Send mEssage:: msg=" + s);
//            System.out.println("Serial Port :: " + serialPort + " Name: " + serialPort.getPortName());

            serialPort.writeString(s);
        } catch (SerialPortException e) {
            System.out.println("Error in sending Message::" + e);
        }
    }

    //receive message from Arduino
    private String receiveMessage() {
        try {
            String receivedMessage = null;
            while (receivedMessage == null) {
                receivedMessage = serialPort.readString();
            }
            return receivedMessage;
        } catch (SerialPortException e) {
            System.out.println("Error in receiving Message::" + e);
            return null;
        }
    }

    //Insert data in motor table
    void insertIntoMotor() {
        try {

            String query = "insert into motor values(1," + Common.valve_start_time_hr + "," + Common.valve_start_time_min + "," + Common.valve_stop_time_hr + "," + Common.valve_stop_time_min + "," + Common.active_time_min + ")";
            Connection con = connectToDatabase();
            Statement st = con.createStatement();
            int x = st.executeUpdate(query);
            closeConnection(con);
        } catch (Exception e) {
            System.out.println("Problem in inserting in motor table :: " + e);
        }
    }

    //create Bar graph for water requirement
    void createBarGraph() {
        try {
            appendToPane(jTextPane1, "Generating Water Usage Chart...", Color.black);
            DefaultCategoryDataset barchartdata = new DefaultCategoryDataset();
            String query = "select * from records";
            Connection con = connectToDatabase();
            PreparedStatement ps = con.prepareStatement(query);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) { 
                barchartdata.setValue(rs.getInt("water_used"), "Water used", rs.getString("date"));
            }
//        barchartdata.setValue(20000, "ABC", "Jan");
//        barchartdata.setValue(20000, "ABC", "Feb");
//        barchartdata.setValue(20000, "ABC", "Mar");
//        barchartdata.setValue(20000, "ABC", "Apr");

            JFreeChart barchart = ChartFactory.createBarChart("WATER USAGE", "DATE", "LITRES", barchartdata, PlotOrientation.VERTICAL, false, true, false);
            CategoryPlot barchrt = barchart.getCategoryPlot();
            barchrt.setRangeGridlinePaint(Color.ORANGE);
            ChartPanel barPanel = new ChartPanel(barchart){
                @Override
                public Dimension getPreferredSize() {
                    return new Dimension(882, 578);
                }
            };
            jPanel1.setLayout(new BorderLayout());
            jPanel1.setBackground(Color.red);
            jPanel1.removeAll();
            jPanel1.add(barPanel, BorderLayout.CENTER);
            jPanel1.validate();
            closeConnection(con);
        } catch (Exception e) {
            System.out.println("Problem in creating bar chart:: " + e);
            appendToPane(jTextPane1, "Problem in generating Water Usage chart\n", Color.red);
        }
        appendToPane(jTextPane1,"Water Usage chart is generated successfully\n", Color.green);
    }

    //Read data for Eternity ;P
    void startInfiniteLoop() {
        try {
            createLog();
            Thread t;
            t = new Thread() {
                @Override
                public void run() {
                    try {
                        appendToPane(jTextPane1,"Running New Thread\n", Color.blue);
                        System.out.println("Inside Thread run");
                        int waterReq = Integer.parseInt(plantWaterReq);
                        System.out.println("Water requirement is : " + waterReq);
                        int min = Integer.parseInt(plantMinMoisture);
                        int max = Integer.parseInt(plantMaxMoisture);

                        int moistureLevel = 0;
                        System.out.println("==============================Water rqq = " + waterReq);
                        System.out.println("===========================min = " + min);
                        System.out.println("================================max = " + max);

                        while (true) {

//                            int moistureLevel = readMoisture();
//                            serialPort.writeString("readm");
                            sendMessage("readm");
                            System.out.println("Write done");
                            String reply = receiveMessage();
                            System.out.println("Read done" + reply);
                            moistureLevel = Integer.parseInt(reply);
//                            moistureLevel=5;
                            System.out.println("After Mois Requ");
                            String valve = "OFF";
                            presentMoistureLevel = moistureLevel;
                            if (previousMoistureLevel - presentMoistureLevel > 30) {

                            } else {
                                System.out.println("*********************INside Else of Start Infinite Loop");
                                if (waterReq > 0) {
                                    if (moistureLevel < min) {
                                        System.out.println("***********************************Inside ML<PMM");
//                                        changeValveState("ON");
                                        valve = "ON";
                                        isValveON = true;
                                        Common.valve_state = valve;
                                        SimpleDateFormat dateTimeInGMT = new SimpleDateFormat("yyyy-MMM-dd hh:mm:ss aa");

                                        //Setting the time zone
                                        dateTimeInGMT.setTimeZone(TimeZone.getTimeZone("GMT"));
                                        System.out.println();
                                        DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy/MM/dd HH:mm:ss");
                                        LocalDateTime now = LocalDateTime.now();
//                                        jTextArea1.append(now.format(dtf));

                                        Common.valve_start_time_hr = now.getHour();
                                        Common.valve_start_time_min = now.getMinute();

//                                        jTextArea1.append("\n=>>>>>>>>>>>>>>>>>>>>>>.DATE"+dtf.format(now));
//                                        jTextArea1.append("\n=>>>>>>>>>>>>>>>>>>>>>>.DATE"+Utility.typeOfMethodSignature(dtf.format(now)));
//                                        Common.valve_start_time = dtf.format(now);
                                    }

                                    if (moistureLevel >= max) {
                                        System.out.println("***********************Inside ML>PMM");
//                                        changeValveState("OFF");
                                        valve = "OFF";
                                        if (isValveON) {
                                            DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy/MM/dd HH:mm:ss");
                                            LocalDateTime now = LocalDateTime.now();
                                            Common.valve_state = valve;
                                            isValveON = false;

                                            Common.valve_stop_time_hr = now.getHour();
                                            Common.valve_stop_time_min = now.getMinute();
                                            System.out.println("\n\n====================>Valve<======================\n");
                                            System.out.println("\tStart hr  = " + Common.valve_start_time_hr);
                                            System.out.println("\tStart min = " + Common.valve_start_time_min);
                                            System.out.println("\tStop hr   = " + Common.valve_stop_time_hr);
                                            System.out.println("\tStop min  = " + Common.valve_stop_time_min);
                                            jTextArea1.append("\n\n====================>Valve<======================\n");
                                            jTextArea1.append("\tStart hr  = " + Common.valve_start_time_hr);
                                            jTextArea1.append("\tStart min = " + Common.valve_start_time_min);
                                            jTextArea1.append("\tStop hr   = " + Common.valve_stop_time_hr);
                                            jTextArea1.append("\tStop min  = " + Common.valve_stop_time_min);
                                            jTextArea1.append("\n\n\t Valve is OFF\n");
                                            if (Common.valve_start_time_hr <= Common.valve_stop_time_hr) {
                                                jTextArea1.append("\tInside first IF\n");
                                                Common.active_time_min = (Common.valve_stop_time_hr - Common.valve_start_time_hr) * 60;
                                                if (Common.valve_stop_time_min < Common.valve_start_time_min) {
                                                    jTextArea1.append("\tInside second IF\n");
                                                    Common.active_time_min -= 60;
                                                    Common.active_time_min += (Common.valve_stop_time_min + 60) - Common.valve_start_time_min;
                                                } else {
                                                    Common.active_time_min += Common.valve_stop_time_min - Common.valve_start_time_min;
                                                }
                                                insertIntoMotor();
//                                                waterReq = waterReq- Common.active_time_min*Common.waterRate;
                                                jTextArea1.append("\t======>Active Motor Time = " + Common.active_time_min + "<=======================\n\n");
                                            }
                                        }

                                    }
                                }
                                System.out.println("A**************fter both IF");
//                                changeValveState("OFF");
                                previousMoistureLevel = presentMoistureLevel;
                                insertIntoMoisture(connectToDatabase(), "" + moistureLevel + "");
                                updateInValve(connectToDatabase(), valve);
                                emptyTable(dtm);

//                                int rows = jTextArea1.getRows();
//                                if (rows>10) {
//                                    jTextArea1.remove(rows / 2);
//
//                                }
                                showSensorTable();
                                setProgressBar();
                                createChart();

                            }
                            System.out.println("********************After big IF");

                            Thread.sleep(3000);

                        }
                    } catch (Exception e) {
                        System.out.println("Start Error in run Thread Start Infinite Loop :: " + e);
                        appendToPane(jTextPane1, "Problem in Thread\n", Color.red);
                    }
                }
            };
//            createLog();
//            System.out.println("Log created");
            t.start();
        } catch (Exception e) {
            System.out.println("Problem in Start infinite loop:: " + e);
        }

    }

    //Insert into Sensor table
    private void showSensorTable() {
        try {
            appendToPane(jTextPane1, "Updating Sensor Table..", Color.black);
            String s_select = "select time,m_value from moisture order by moisture.time DESC LIMIT 6";
            Connection con = connectToDatabase();
            PreparedStatement ps = con.prepareStatement(s_select);
            ResultSet rs = ps.executeQuery();
            int count_for_log = 0;
            while (rs.next()) {

                String table_time = rs.getString(1);
                String table_moisture_percentage = rs.getString(2);
                String table_valve;
                if (Integer.parseInt(table_moisture_percentage) > Integer.parseInt(plantMaxMoisture)) {
                    table_valve = "OFF";
                } else {
                    table_valve = "ON";
                }
                if (count_for_log == 0) {

                    jTextArea1.append("\nDateTime :: " + table_time);
                    jTextArea1.append("\t Moisture Level :: " + table_moisture_percentage);
                    jTextArea1.append("\t Valve Status :: " + table_valve);
                    count_for_log++;
                }
                Object obj[] = {table_time, table_moisture_percentage, table_valve};
                dtm.addRow(obj);
            }
            jTable2.setModel(dtm);
            System.out.println("Table Done");
            closeConnection(con);
        } catch (Exception e) {
            System.out.println("Shpw table error ::" + e);
            appendToPane(jTextPane1, "Error in Sensor table", Color.red);
        }
        appendToPane(jTextPane1,"Sensor table Updated successfully\n", Color.green);
    }

    //empty Table
    private void emptyTable(DefaultTableModel dtmTemp) {
        int rowCount = dtmTemp.getRowCount();
        //Remove rows one by one from the end of the table
        for (int i = rowCount - 1; i >= 0; i--) {
            dtmTemp.removeRow(i);
        }
    }

    //setProgress Bar to avg mositure sensor rating
    private void setProgressBar() {
        try {
            appendToPane(jTextPane1,"Setting up the progress bar\n", Color.black);
            Connection con = connectToDatabase();
            String s_progressBar = "select avg(m_value) from moisture";
            Statement st_pb = con.createStatement();
            ResultSet rs_pbSet = st_pb.executeQuery(s_progressBar);
            while (rs_pbSet.next()) {
                float pg_value = rs_pbSet.getFloat(1);
                System.out.println("PG value = " + pg_value);

//                            if(pg_value<10){
//                                pg_value = 49; 
//                            }
                jProgressBar1.setStringPainted(true);
                jProgressBar1.setValue((int) pg_value);

                System.out.println("Progress bar done");
                connectToDatabase();
            }
        } catch (Exception e) {
            System.out.println("Problem in Progress Bar:: " + e);

        }

    }

    //readMoistureData
    int readMoisture() {
        appendToPane(jTextPane1,"\nReading moisture value from Arduino\n", Color.black);
        System.out.println("Reading Moisture");
        sendMessage("readM");
        String moisture = null;
        while (moisture == null) {
            moisture = receiveMessage();
        }
        appendToPane(jTextPane1,"Moisture value read.\n", Color.green);
        int moistureLevel = Integer.parseInt(moisture);
        return moistureLevel;

    }

    //change valve state
    void changeValveState(String state) {
        System.out.println("$$$$$$$$$$$$$$$$$$$$$$$$$$$$Change Valve State: Sending Message");
        appendToPane(jTextPane1, "\nChanging Valve Status..\n", Color.black);
        sendMessage("cvs");
        sendMessage(state);
//        String moisture = null;
//        while (moisture != null) {
//            moisture = receiveMessage();
//        }
        System.out.println("");

    }

    //create Chart in jPanel5
    private void createChart() {
        try {
            jPanel5.setLayout(new java.awt.BorderLayout());

//            XYSeries series = new XYSeries("XYGraph");
//            String query = "SELECT time(time) FROM moisture order BY time DESC LIMIT 10";
//            Connection con = connectToDatabase();
//            PreparedStatement ps = con.prepareStatement(query);
//            ResultSet rs = ps.executeQuery();
//            while (rs.next()) {
//
//                String table_time = rs.getString(1);
//                String table_moisture_percentage = rs.getString(2);
//                series(table_time,table_moisture_percentage);
//            }
            String query = "SELECT time(time),m_value FROM moisture order BY time DESC LIMIT 10";
            Connection con = connectToDatabase();

// Add the series to your data set
            JDBCXYDataset jds = new JDBCXYDataset(con);
            jds.executeQuery(query);
            JFreeChart chart = ChartFactory.createTimeSeriesChart("Moisture Level", "Time", "Moisture", jds, true, true, false);

            XYPlot xyPlot = chart.getXYPlot();
            ValueAxis rangeAxis = xyPlot.getRangeAxis();
            rangeAxis.setRange(0, 100);

// Generate the graph
//            JFreeChart chart = ChartFactory.createXYLineChart(
//                    "XY Chart", // Title
//                    "x-axis", // x-axis Label
//                    "y-axis", // y-axis Label
//                    dataset, // Dataset
//                    PlotOrientation.VERTICAL, // Plot Orientation
//                    true, // Show Legend
//                    true, // Use tooltips
//                    false // Configure chart to generate URLs?
//            );
            ChartPanel CP = new ChartPanel(chart);

            jPanel5.add(CP, BorderLayout.CENTER);
            jPanel5.validate();

        } catch (Exception e) {
            System.out.println("Problem in creating Graph:: " + e);
        }
    }

    //create Logs
    void createLog() {
        System.out.println("Create Log Started");
        jTextArea1.append("\t\t\tGENERAL INFORMATION\n\n");
        String userName = null;
        String userPhone = null;
        String userEmail = null;
        String userAddress = null;
        String query = "select name,phonenumber,email,address from users where userid =1";
        try {
            Connection con = connectToDatabase();
            Statement st = con.createStatement();
            ResultSet rs = st.executeQuery(query);
            while (rs.next()) {
                userName = rs.getString(1);
                userPhone = rs.getString(2);
                userEmail = rs.getString(3);
                userAddress = rs.getString(4);
            }
            jTextArea1.append("Name      : " + userName);
            jTextArea1.append("\nPhone No. : " + userPhone);
            jTextArea1.append("\nemail     : " + userEmail);
            jTextArea1.append("\naddress   : " + userAddress);
            jTextArea1.append("\n------------------------------------------------------------------------------------------------------\n\n");
            query = "select * from moisture order by time DESC LIMIT 10";
            rs = st.executeQuery(query);
            while (rs.next()) {
                jTextArea1.append("\nDateTime :: " + rs.getString("time"));
                jTextArea1.append("\t Moisture Level :: " + rs.getString("m_value"));
                String valveStatus;
                if (Integer.parseInt(rs.getString("m_value")) > Integer.parseInt(plantMaxMoisture)) {
                    valveStatus = "OFF";
                } else {
                    valveStatus = "ON";
                }
                jTextArea1.append("\t Valve Status:: " + valveStatus);

            }

            closeConnection(con);
        } catch (SQLException e) {
            System.out.println("Error in getting user data:: " + e);
        }

//        Thread t_log = new Thread() {
//            public void run() {
//
//            }
//        };
    }

    /**
     * @param args
     */
    //    public static void main(String args[]) {
    //        int i=3;
    //        /* Set the Nimbus look and feel */
    //        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
    //        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
    //         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
    //         */
    //        try {
    //            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
    //                if ("Windows".equals(info.getName())) {
    ////                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
    //                    UIManager.setLookAndFeel("com.jtattoo.plaf.mint.MintLookAndFeel");
    ////                    break;
    //                }
    //            }
    //        } catch (ClassNotFoundException ex) {
    //            java.util.logging.Logger.getLogger(Index.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    //        } catch (InstantiationException ex) {
    //            java.util.logging.Logger.getLogger(Index.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    //        } catch (IllegalAccessException ex) {
    //            java.util.logging.Logger.getLogger(Index.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    //        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
    //            java.util.logging.Logger.getLogger(Index.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    //        }
    //        //</editor-fold>
    //        //</editor-fold>
    //
    //        /* Create and display the form */
    //        java.awt.EventQueue.invokeLater(new Runnable() {
    //            public void run() {
    //                new Index().setVisible(true);
    //            }
    //        });
    //    }
    //My Main method
    public static void mainIndex() {
//    public static void main(String[] args) {
        int i = 3;
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    UIManager.setLookAndFeel("com.jtattoo.plaf.smart.SmartLookAndFeel");
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Index.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Index.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Index.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Index.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
//        Index index = new Index();
        Index indexObj = new Index();
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                indexObj.setVisible(true);
//                index.setVisible(true);
            }

        });
        indexObj.setSerialPort();
        indexObj.setMinMoisture();
        indexObj.createChart();
//        indexObj.showSensorTable();
        indexObj.createBarGraph();
        Thread t = new Thread() {
            @Override
            public void run() {
                try {
                    indexObj.startInfiniteLoop();
                } catch (Exception e) {
                    System.out.println("Error:  +" + e);
                }

            }
        };

        t.start();

//        new Index().createLog();
//        index.setSerialPort();
//        index.setMinMoisture();
//        System.out.println("After Min Moisture");
//        try {
//            Thread t = new Thread() {
//                @Override
//                public void run() {
//                    try {
//                        index.showSensorTable();
//                        index.createChart();
//                    } catch (Exception e) {
//                        System.out.println("Error:  +" + e);
//                    }
//
//                }
//            };
//
//            t.start();
//            index.createLog();
//        } catch (Exception e) {
//            System.out.println("Problem in Start infinite loop:: " + e);
//        }
//        Index index = new Index();
//        if (index.setSerialPort() && index.setMinMoisture()) {
//            index.startInfiniteLoop();
////            try {
////                Thread t = new Thread() {
////                    public void run() {
////
////                    }
////                };
////
//        } catch (Exception e) {
//            System.out.println("Index Main ::" + e);
//        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu10;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu6;
    private javax.swing.JMenu jMenu7;
    private javax.swing.JMenu jMenu8;
    private javax.swing.JMenu jMenu9;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private static javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel7;
    private static javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTabbedPane jTabbedPane4;
    private javax.swing.JTable jTable1;
    private static javax.swing.JTable jTable2;
    private javax.swing.JTextArea jTextArea1;
    public javax.swing.JTextPane jTextPane1;
    // End of variables declaration//GEN-END:variables
}
